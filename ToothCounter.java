
import java.text.DecimalFormat;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author seth
 */
public class ToothCounter extends javax.swing.JFrame {
   
     
    public ToothCounter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wheelSizeLabel = new javax.swing.JLabel();
        crankLengthLabel = new javax.swing.JLabel();
        crankLengthCombo = new javax.swing.JComboBox();
        wheelSizeCombo = new javax.swing.JComboBox();
        kneeTypeLabel = new javax.swing.JLabel();
        kneeTypeCombo = new javax.swing.JComboBox();
        avgMPHLabel = new javax.swing.JLabel();
        avgMPHInput = new javax.swing.JTextField();
        computeButton = new javax.swing.JButton();
        chainRingToothLabel = new javax.swing.JLabel();
        chainRingToothInput = new javax.swing.JTextField();
        cogToothLabel = new javax.swing.JLabel();
        cogToothInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        tireSizeLabel = new javax.swing.JLabel();
        tireSizeCombo = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        wheelSizeLabel.setText("Wheel Size: ");

        crankLengthLabel.setText("Crank Length (mm):");

        crankLengthCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "165", "167.5", "170", "172.5", "175" }));
        crankLengthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crankLengthComboActionPerformed(evt);
            }
        });

        wheelSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "700c (29\", 622mm)", "28\" (700b, 635mm)", "27\" (630mm)", "26\" (650c, 571mm)", "20\" (451mm)", " " }));
        wheelSizeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wheelSizeComboActionPerformed(evt);
            }
        });

        kneeTypeLabel.setText("Knee Type:");

        kneeTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "normal", "waif", "beast" }));

        avgMPHLabel.setText("Average MPH:");

      //  avgMPHInput.setText("0");

        computeButton.setText("Compute");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });

        chainRingToothLabel.setText("# Teeth in Chain Ring");

     //   chainRingToothInput.setText("0");

        cogToothLabel.setText("# Teeth in Cog");

   //    cogToothInput.setText("0");

        outputText.setColumns(20);
        outputText.setRows(5);
        jScrollPane1.setViewportView(outputText);

        tireSizeLabel.setText("Rear Tire Size (mm):");

        tireSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "23", "20", "21", "23", "25", "28", "30", "33", "35", "42" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(crankLengthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(crankLengthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(chainRingToothLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(chainRingToothInput, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(9, 9, 9)
                                            .addComponent(kneeTypeLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(kneeTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(avgMPHLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(avgMPHInput, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cogToothLabel)
                                            .addGap(18, 18, 18)
                                            .addComponent(cogToothInput, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(371, 371, 371)
                                    .addComponent(computeButton))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(wheelSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wheelSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(tireSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tireSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wheelSizeLabel)
                    .addComponent(wheelSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tireSizeLabel)
                    .addComponent(tireSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crankLengthLabel)
                    .addComponent(crankLengthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chainRingToothLabel)
                    .addComponent(chainRingToothInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cogToothLabel)
                    .addComponent(cogToothInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avgMPHLabel)
                    .addComponent(avgMPHInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kneeTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kneeTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(computeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
  
  // get all comboBox values. 
        
         //set wheel mm's to the default value (700c)
        
       String wheelSize = (String)wheelSizeCombo.getSelectedItem();
             int wheelmm = 622;
             
        if (wheelSize == "28\" (700b, 635mm)") {
            wheelmm = 635;
        }
        else if (wheelSize == "27\" (630mm)") {
            wheelmm = 630;
        }
        else if (wheelSize == "26\" (650c, 571mm)") {
            wheelmm = 571;
        }
        else if (wheelSize == "20\" (451mm)") {
            wheelmm = 451;
        }
        // these values are unlikely to change for any given person -- crank length, knee type, and wheelsize 
        // and convert all these to appropriate data type        
      
        int tireSize = Integer.parseInt((String)tireSizeCombo.getSelectedItem());
  
        // we will adjust proper rpm based on knee type, chosing "normal" if no other type is specified
        int rpm = 85;
        String kneeType = (String)kneeTypeCombo.getSelectedItem();
        int kneeAdj = 0;
        if (kneeType == "waif") {
            rpm = 90;
        }
        else if (kneeType == "beast"){
            rpm = 80;
        }
        
         // longer cranks are harder to push -- 165 and 170 are the most common values
        // so i split the difference -- plus, i run 167.5 very happily
              
        double crankDbl = Double.parseDouble((String)crankLengthCombo.getSelectedItem());
        if (crankDbl == 165) {
            rpm++;
        }
        else if (crankDbl == 170) {
            rpm--;
        }
        else if (crankDbl == 172.5) {
            rpm = rpm-2;
        }
        else if (crankDbl == 175) {
            rpm = rpm-3;
        }
           
        
         // circumfernce * gear ratio = one crank rotation's output
         double circumference = (wheelmm+(tireSize*2))*3.14;
        
        /* must account for 7 scenarios:
         * 1. chain ring == 0 ; teeth cog == 0 ; avgmph == 0 -- cannot compute, issue warning
         * 2. chain ring == 0 ; teeth cog != 0 ; avgmph == 0 -- cannot compute, issue warning
         * 3. chain ring != 0 ; teeth cog == 0 ; avgmph == 0 -- cannot compute, issue warning
         * 4. chain ring != 0 ; teeth cog != 0 ; avgmph == 0 -- find average MPH
         * 5. chain ring == 0 ; teeth cog == 0 ; avgmph != 0 -- find appropriate gear ratio
         * 6. chain ring == 0 ; teeth cog != 0 ; avgmph != 0 -- find appropriate chain ring
         * 7. chain ring != 0 ; teeth cog == 0 ; avgmph != 0 -- find appropriate cog size
         * 
         */
       
        
        // initialize avgMPH to 0 for easy condition checking later 
        //valid number since someone might want
        // to use this to figure out how fast he is going based upon gearRatio and kneeType
      //  int avgMPH = 0;
       // avgMPH = Integer.parseInt(avgMPHInput.getText());
            String avgMPH;
            avgMPH = avgMPHInput.getText();
         
        // initialize chain ring and cog size to 0, but test for zero before deviding 
 //   int chainRing; //= 0;
  //  int cogTeeth;// = 0;
     //    int chainRing = Integer.parseInt(chainRingToothInput.getText());
   //       chainRing = Integer.parseInt(chainRingToothInput.getText());
    //      cogTeeth = Integer.parseInt(cogToothInput.getText());
            String chainRing = chainRingToothInput.getText();
            String cogTeeth = cogToothInput.getText();
          
          DecimalFormat df = new DecimalFormat("##.##");
        
         // compute scenario #1 -- issue warning for insufficient info
        if ( avgMPH.isEmpty() ) {
            System.out.println("avgMPH = 0");
            if ( chainRing.isEmpty() ){
                 System.out.println("chainRing = 0");
                if (cogTeeth.isEmpty()){
               
                    System.out.println("cogteeth = 0");
                    // scenario #1 from above
                       outputText.setText("provide either a gear ratio (chain ring and cog size)," +
                       System.getProperty("line.separator") + "or your desired average MPH.");
                }
                else if (cogTeeth.length() != 0) {      // -- #2 from above
                    System.out.println("cogteeth != 0");
                       outputText.setText("provide either a gear ratio (chain ring and cog size)," +
                       System.getProperty("line.separator") + "or your desired average MPH.");
                }
            }
             else if (chainRing.length() != 0) {     //( chainRing != 0 ) -- #3 from above
                 System.out.println("chainring != 0");
                if (cogTeeth.isEmpty()) {
                     System.out.println("cogteeth = 0");
                    System.out.println("testing for chainring != 0");
                       outputText.setText("provide either a cog size to create a gear ratio (chain ring and cog size)," +
                       System.getProperty("line.separator") + "or your desired average MPH.");
                }
                else if (cogTeeth.length() != 0) { // cogTeeth != 0 , chainRing != 0 ) #4 above
                     System.out.println("cogteeth != 0");
                     double gearRatio = Double.parseDouble(chainRing)/(Double.parseDouble(cogTeeth)); 
                     outputText.setText("gear ratio is: " + gearRatio);  // just verifying value
        
                    
                     // divided by 1000 to turn into meters per pedal revolution
                        double development = (gearRatio)*circumference/1000;
                    // 3.28ft/meter -- turns into US measurement
                        double devInFt = development*3.28;
                    // multiplied by number of revolutions per minute
                        double FtPerHour = devInFt*rpm*60;
                        // turns into mph
                        double mph = FtPerHour/5280;
       
                    outputText.setText("Chain ring: " + chainRing + 
                        System.getProperty("line.separator") + "Cog size: " + cogTeeth +
                        System.getProperty("line.separator") + "Gear Ratio: " + df.format(gearRatio) +
                        System.getProperty("line.separator") + "Cadence: " + rpm +
                        System.getProperty("line.separator") +"Your average MPH will be: " + df.format(mph));
                }
              }
        } 
        else if (avgMPH.length() != 0) { // #5 above -- find appropriate gear ratio
                  // only compute gearRatio once for non-zero MPH
                    
                  // mph to feet per minute
                  double feetPerMin = Double.parseDouble(avgMPH)*5280/60;
                  System.out.println("ft per min: " + feetPerMin);
                  // feet per minute to meters per minute (3.28 ft/meter)
                  double mmPerMin = 1000*feetPerMin/3.28;
                  System.out.println("mmPer Min: " + mmPerMin);
                  // development (distance traveled by one crank rotation in mm)
                  // circumference = (wheelmm+(tireSize*2))*3.14 -- defined above
                  double development = mmPerMin/circumference;
                 // gear ratio = distance per minute divided by number of crank rotations
                  double gearRatio = development/rpm;
                           
 
                  if (chainRing.isEmpty() ) {
                       
                        if (cogTeeth.isEmpty() ) {
                          outputText.setText("To ride at " + avgMPH + " MPH, your gear ratio would need to be: " + df.format(gearRatio) +
                          System.getProperty("line.separator") + ("Suitable gear ratio combinataions would be: " ));
                      //    System.out.println("#5 -- chain ring = 0, cog teeth = 0");
                     // find valid chainring/cog combinations that would satisfy the gearRatio
                     for (int i=54;i>36;i--) {
                          for (int j=22; j>10; j--) {
                            System.out.print( i + "/" + j + " = " + (double) i/j);
                            System.out.println( " meaning: " + ((double) i/j-gearRatio) + " left over" );
                                  if ( Math.abs((double) i/j - gearRatio) < .01 ) {
                                        outputText.append(System.getProperty("line.separator") + "Chain Ring: " + i + " Cog Teeth: " + j );
                                  }
                           }
                      }
                  
                        }
                        else if (cogTeeth.length() != 0 ) { // #6 from above -- find appropriate chain ring size
                     //       System.out.println("#6 -- cog teeth != 0");
                      //      System.out.println("check gearRatio: " + gearRatio + " and cogTeeth: " + cogTeeth);
                            chainRing = Integer.toString((int) Math.round(gearRatio*Double.parseDouble(cogTeeth)));
                            outputText.setText("With an average MPH of: " + avgMPH +
                            System.getProperty("line.separator") + "Cog size: " + cogTeeth +
                            System.getProperty("line.separator") + "Cadence: " + rpm +
                            System.getProperty("line.separator") + "You should use this size Chain Ring: " + chainRing );
                        }
                    }   
                    else if (chainRing.length() != 0 ) { // #7 above -- find appropriate cog size (cogTeeth == 0)
                        System.out.println("#7 -- chain ring != 0");
                        double chainRingD = Double.parseDouble(chainRing);
                        System.out.println("chainRingD: " + chainRingD);
                        System.out.println((int) Math.round(chainRingD/gearRatio));
                            int cogTeethInt = (int) Math.round(chainRingD/gearRatio);
                 //           cogTeeth = Integer.toString(cogTeethInt);
                            outputText.setText("With an average MPH of: " + avgMPH +
                           System.getProperty("line.separator") + "Chain Ring size: " + chainRing +
                         System.getProperty("line.separator") + "Cadence: " + rpm + 
                            System.getProperty("line.separator") + "You should use this size Cog: " + cogTeethInt );   
                    }
                    
                 
        }      
                
                
                
     
    }//GEN-LAST:event_computeButtonActionPerformed
        
    
    private void wheelSizeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wheelSizeComboActionPerformed
        // TODO add your handling code here:
        
    
    }//GEN-LAST:event_wheelSizeComboActionPerformed

    private void crankLengthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crankLengthComboActionPerformed
      //  int crankLength = Integer.parseInt(crankLengthCombo.getName());
    }//GEN-LAST:event_crankLengthComboActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ToothCounter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ToothCounter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ToothCounter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ToothCounter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ToothCounter().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField avgMPHInput;
    private javax.swing.JLabel avgMPHLabel;
    private javax.swing.JTextField chainRingToothInput;
    private javax.swing.JLabel chainRingToothLabel;
    private javax.swing.JTextField cogToothInput;
    private javax.swing.JLabel cogToothLabel;
    private javax.swing.JButton computeButton;
    private javax.swing.JComboBox crankLengthCombo;
    private javax.swing.JLabel crankLengthLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox kneeTypeCombo;
    private javax.swing.JLabel kneeTypeLabel;
    private javax.swing.JTextArea outputText;
    private javax.swing.JComboBox tireSizeCombo;
    private javax.swing.JLabel tireSizeLabel;
    private javax.swing.JComboBox wheelSizeCombo;
    private javax.swing.JLabel wheelSizeLabel;
    // End of variables declaration//GEN-END:variables
}
